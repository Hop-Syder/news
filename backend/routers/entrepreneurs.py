from fastapi import APIRouter, HTTPException, Depends, Query, status
from typing import List, Optional
from models.entrepreneur import (\n    EntrepreneurCreate, \n    EntrepreneurUpdate,\n    EntrepreneurPublic, \n    EntrepreneurFull,\n    EntrepreneurContactInfo\n)\nfrom services.supabase_client import get_supabase_admin\nfrom dependencies import get_current_user, get_current_user_optional\nfrom supabase import Client\nimport logging\n\nlogger = logging.getLogger(__name__)\nrouter = APIRouter(prefix="/entrepreneurs", tags=["Entrepreneurs"])\n\n\n@router.post("", response_model=EntrepreneurFull, status_code=status.HTTP_201_CREATED)\nasync def create_entrepreneur(\n    entrepreneur_data: EntrepreneurCreate,\n    current_user: dict = Depends(get_current_user),\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Create entrepreneur profile\n    \n    - Requires authentication\n    - One profile per user\n    - Automatically updates user has_profile flag\n    """\n    try:\n        # Check if user already has a profile\n        existing = supabase.table('entrepreneurs')\\\n            .select('id')\\\n            .eq('user_id', current_user['id'])\\\n            .execute()\n        \n        if existing.data:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail="User already has an entrepreneur profile"\n            )\n        \n        # Create entrepreneur profile\n        entrepreneur_dict = entrepreneur_data.model_dump()\n        entrepreneur_dict['user_id'] = current_user['id']\n        \n        result = supabase.table('entrepreneurs')\\\n            .insert(entrepreneur_dict)\\\n            .execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail="Failed to create entrepreneur profile"\n            )\n        \n        # Update user profile has_profile flag\n        supabase.table('user_profiles')\\\n            .update({'has_profile': True})\\\n            .eq('user_id', current_user['id'])\\\n            .execute()\n        \n        return result.data[0]\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Create entrepreneur error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to create profile: {str(e)}"\n        )\n\n\n@router.get("", response_model=List[EntrepreneurPublic])\nasync def list_entrepreneurs(\n    search: Optional[str] = Query(None, description="Search in name, company, activity, description"),\n    country_code: Optional[str] = Query(None, description="Filter by country code (2 letters)"),\n    city: Optional[str] = Query(None, description="Filter by city"),\n    profile_type: Optional[str] = Query(None, description="Filter by profile type"),\n    tags: Optional[str] = Query(None, description="Filter by tags (comma-separated)"),\n    min_rating: Optional[float] = Query(None, ge=0, le=5, description="Minimum rating"),\n    sort_by: str = Query("created_at", description="Sort field: created_at, rating, relevance"),\n    sort_order: str = Query("desc", description="Sort order: asc or desc"),\n    limit: int = Query(50, ge=1, le=100, description="Results per page"),\n    offset: int = Query(0, ge=0, description="Pagination offset"),\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    List all entrepreneurs (public view without contact info)\n    \n    - No authentication required\n    - Contact info hidden (use /entrepreneurs/{id}/contact)\n    - Supports filtering, search, and pagination\n    """\n    try:\n        # Use public view (without contacts)\n        query = supabase.table('entrepreneurs_public').select('*')\n        \n        # Apply filters\n        if country_code:\n            query = query.eq('country_code', country_code.upper())\n        \n        if city:\n            query = query.ilike('city', f'%{city}%')\n        \n        if profile_type:\n            query = query.eq('profile_type', profile_type)\n        \n        if min_rating:\n            query = query.gte('rating', min_rating)\n        \n        if tags:\n            # PostgreSQL array contains\n            tag_list = [t.strip() for t in tags.split(',')]\n            query = query.contains('tags', tag_list)\n        \n        # Full-text search (if search provided)\n        if search:\n            # Use PostgreSQL text search\n            # Note: This requires the tsvector index we created\n            search_query = supabase.table('entrepreneurs')\\\n                .select('id')\\\n                .or_(f\"first_name.ilike.%{search}%,last_name.ilike.%{search}%,company_name.ilike.%{search}%,activity_name.ilike.%{search}%,description.ilike.%{search}%\")\\\n                .execute()\n            \n            if search_query.data:\n                matching_ids = [item['id'] for item in search_query.data]\n                query = query.in_('id', matching_ids)\n            else:\n                # No matches\n                return []\n        \n        # Sort\n        ascending = (sort_order.lower() == \"asc\")\n        if sort_by == \"rating\":\n            query = query.order('rating', desc=not ascending)\n        elif sort_by == \"relevance\" and search:\n            query = query.order('rating', desc=True)  # Relevance = rating for now\n        else:\n            query = query.order('created_at', desc=not ascending)\n        \n        # Pagination\n        query = query.range(offset, offset + limit - 1)\n        \n        result = query.execute()\n        \n        return result.data if result.data else []\n        \n    except Exception as e:\n        logger.error(f"List entrepreneurs error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to retrieve entrepreneurs: {str(e)}"\n        )\n\n\n@router.get("/me", response_model=EntrepreneurFull)\nasync def get_my_profile(\n    current_user: dict = Depends(get_current_user),\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Get current user's entrepreneur profile\n    \n    - Requires authentication\n    - Returns full profile with contact info\n    """\n    try:\n        result = supabase.table('entrepreneurs')\\\n            .select('*')\\\n            .eq('user_id', current_user['id'])\\\n            .single()\\\n            .execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail="Entrepreneur profile not found"\n            )\n        \n        return result.data\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Get my profile error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to retrieve profile: {str(e)}"\n        )\n\n\n@router.get("/{entrepreneur_id}", response_model=EntrepreneurPublic)\nasync def get_entrepreneur(\n    entrepreneur_id: str,\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Get entrepreneur by ID (public view without contact info)\n    \n    - No authentication required\n    - Contact info hidden\n    """\n    try:\n        result = supabase.table('entrepreneurs_public')\\\n            .select('*')\\\n            .eq('id', entrepreneur_id)\\\n            .single()\\\n            .execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail="Entrepreneur not found"\n            )\n        \n        return result.data\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Get entrepreneur error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to retrieve entrepreneur: {str(e)}"\n        )\n\n\n@router.get("/{entrepreneur_id}/contact", response_model=EntrepreneurContactInfo)\nasync def get_entrepreneur_contact(\n    entrepreneur_id: str,\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Get entrepreneur contact information (protected)\n    \n    - No authentication required (anti-scraping via rate limiting)\n    - Uses PostgreSQL function for secure access\n    - Optionally log access for analytics\n    """\n    try:\n        # Use PostgreSQL function (defined in schema)\n        result = supabase.rpc(\n            'get_entrepreneur_contacts',\n            {'entrepreneur_id': entrepreneur_id}\n        ).execute()\n        \n        if not result.data or len(result.data) == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail="Entrepreneur not found"\n            )\n        \n        return result.data[0]\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Get entrepreneur contact error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to retrieve contact info: {str(e)}"\n        )\n\n\n@router.put("/{entrepreneur_id}", response_model=EntrepreneurFull)\nasync def update_entrepreneur(\n    entrepreneur_id: str,\n    entrepreneur_data: EntrepreneurUpdate,\n    current_user: dict = Depends(get_current_user),\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Update entrepreneur profile\n    \n    - Requires authentication\n    - Can only update own profile (RLS enforces this)\n    - All fields optional (PATCH-like behavior)\n    """\n    try:\n        # Check ownership\n        existing = supabase.table('entrepreneurs')\\\n            .select('user_id')\\\n            .eq('id', entrepreneur_id)\\\n            .single()\\\n            .execute()\n        \n        if not existing.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail="Entrepreneur profile not found"\n            )\n        \n        if existing.data['user_id'] != current_user['id']:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail="Not authorized to update this profile"\n            )\n        \n        # Update only provided fields\n        update_dict = entrepreneur_data.model_dump(exclude_unset=True)\n        \n        if not update_dict:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail="No fields to update"\n            )\n        \n        result = supabase.table('entrepreneurs')\\\n            .update(update_dict)\\\n            .eq('id', entrepreneur_id)\\\n            .execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail="Failed to update profile"\n            )\n        \n        return result.data[0]\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Update entrepreneur error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to update profile: {str(e)}"\n        )\n\n\n@router.delete("/{entrepreneur_id}", status_code=status.HTTP_204_NO_CONTENT)\nasync def delete_entrepreneur(\n    entrepreneur_id: str,\n    current_user: dict = Depends(get_current_user),\n    supabase: Client = Depends(get_supabase_admin)\n):\n    """\n    Delete entrepreneur profile\n    \n    - Requires authentication\n    - Can only delete own profile (RLS enforces this)\n    - Also updates user has_profile flag\n    """\n    try:\n        # Check ownership\n        existing = supabase.table('entrepreneurs')\\\n            .select('user_id')\\\n            .eq('id', entrepreneur_id)\\\n            .single()\\\n            .execute()\n        \n        if not existing.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail="Entrepreneur profile not found"\n            )\n        \n        if existing.data['user_id'] != current_user['id']:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail="Not authorized to delete this profile"\n            )\n        \n        # Delete profile\n        supabase.table('entrepreneurs')\\\n            .delete()\\\n            .eq('id', entrepreneur_id)\\\n            .execute()\n        \n        # Update user has_profile flag\n        supabase.table('user_profiles')\\\n            .update({'has_profile': False})\\\n            .eq('user_id', current_user['id'])\\\n            .execute()\n        \n        return None\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f"Delete entrepreneur error: {str(e)}")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f"Failed to delete profile: {str(e)}"\n        )\n