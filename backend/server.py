from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from backend.config import get_settings
from backend.routers import auth, entrepreneurs, contact, storage
import logging
from pathlib import Path\nfrom dotenv import load_dotenv\n\n# Load environment variables\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Get settings\nsettings = get_settings()\n\n# Create FastAPI app\napp = FastAPI(\n    title=settings.APP_NAME,\n    version=settings.APP_VERSION,\n    description=\"Nexus Connect API - Powered by Supabase\",\n    docs_url=\"/api/docs\",\n    redoc_url=\"/api/redoc\",\n    openapi_url=\"/api/openapi.json\"\n)\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=settings.cors_origins_list,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers with /api prefix\napp.include_router(auth.router, prefix=\"/api\")\napp.include_router(entrepreneurs.router, prefix=\"/api\")\napp.include_router(contact.router, prefix=\"/api\")\napp.include_router(storage.router, prefix=\"/api\")\n\n\n# Root endpoint\n@app.get(\"/\")\nasync def root():\n    \"\"\"Root endpoint\"\"\"\n    return {\n        \"message\": settings.APP_NAME,\n        \"version\": settings.APP_VERSION,\n        \"status\": \"operational\",\n        \"environment\": settings.ENVIRONMENT,\n        \"docs\": \"/api/docs\"\n    }\n\n\n@app.get(\"/api\")\nasync def api_root():\n    \"\"\"API root endpoint\"\"\"\n    return {\n        \"message\": f\"{settings.APP_NAME} - API\",\n        \"version\": settings.APP_VERSION,\n        \"status\": \"operational\",\n        \"endpoints\": {\n            \"auth\": \"/api/auth\",\n            \"entrepreneurs\": \"/api/entrepreneurs\",\n            \"contact\": \"/api/contact\",\n            \"storage\": \"/api/storage\",\n            \"docs\": \"/api/docs\"\n        }\n    }\n\n\n@app.get(\"/health\")\n@app.get(\"/api/health\")\nasync def health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return {\n        \"status\": \"healthy\",\n        \"version\": settings.APP_VERSION\n    }\n\n\n# Startup event\n@app.on_event(\"startup\")\nasync def startup_event():\n    logger.info(f\"üöÄ {settings.APP_NAME} v{settings.APP_VERSION} starting...\")\n    logger.info(f\"üìç Environment: {settings.ENVIRONMENT}\")\n    logger.info(f\"üîó Supabase URL: {settings.SUPABASE_URL}\")\n    logger.info(f\"üåê CORS Origins: {settings.cors_origins_list}\")\n    logger.info(\"‚úÖ Server started successfully!\")\n\n\n# Shutdown event\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    logger.info(\"üëã Server shutting down...\")\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\n        \"server:app\",\n        host=\"0.0.0.0\",\n        port=8001,\n        reload=True\n    )\n